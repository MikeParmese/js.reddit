{"version":3,"sources":["components/VehiclesContainer/VehiclesContainer.tsx","components/Filter/Filter.tsx","components/Vehicle/Vehicle.tsx","components/Vehicles/Vehicles.tsx","utils/calculateDistance.tsx","utils/sortVehicleProps.tsx","components/Unit/Unit.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["UnitType","Filter","filter","className","data-testid","onChange","e","target","value","type","distanceFormat","Intl","NumberFormat","maximumFractionDigits","speedFormat","Vehicle","distance","make","model","topSpeed","year","format","Vehicles","children","sort","onClick","calculateDistance","now","speed","then","Date","getTime","sortVehicleProps","array","field","asc","a","b","aField","bField","flip","toLowerCase","selectedClass","expected","actual","Unit","setUnitType","unitType","MPH","KMH","VehiclesContainer","useState","date","setDate","useEffect","interval","setInterval","clearInterval","entries","JSON","parse","stringify","initial","setFilter","entry","lower","includes","props","map","key","setSort","prop","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de37edff.chunk.js","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react';\n\nimport Filter from '../Filter';\nimport Vehicle, { VehicleProps } from '../Vehicle';\nimport Vehicles from '../Vehicles';\n\nimport calculateDistance from '../../utils/calculateDistance';\nimport initial from '../../config/vehicles.json';\nimport sortVehicleProps from '../../utils/sortVehicleProps';\nimport Unit from '../Unit/Unit';\n\nexport enum UnitType {\n  KMH,\n  MPH\n}\n\n/**\n * The list of vehicle entries from the JSON.\n */\ntype Entries = Entry[];\n\n/**\n * The vehicle entry from the JSON data.\n */\ntype Entry = {\n  make: string,\n  model: string,\n  topSpeed: number,\n  year: number\n};\n\n/**\n * Renders a filterable and sortable table with data updated on an interval.\n */\nconst VehiclesContainer: FunctionComponent = () => {\n\n  // Recalculate the distance on a regular interval.\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(\n      () => setDate(new Date()),\n      2000\n    );\n\n    return () => clearInterval(interval);\n  });\n\n  // The initial list of vehicle entries.\n  let entries: Entry[] = JSON.parse(JSON.stringify(initial));\n\n  // Filter the list of entries.\n  let [filter, setFilter] = useState('');\n\n  if (filter) {\n    entries = entries.filter(entry => {\n      const lower = filter.toLowerCase();\n\n      return entry.make.toLowerCase().includes(lower) \n        || entry.model.toLowerCase().includes(lower);\n    });\n  }\n\n  // Convert unit type.\n  let [unitType, setUnitType] = useState(UnitType.MPH);\n\n  // Convert the entries to props.\n  let props: VehicleProps[] = entries.map(entry => {\n    let topSpeed = entry.topSpeed;\n\n    if (unitType === UnitType.KMH) {\n      topSpeed *= 1.609344;\n    }\n\n    return {\n      ...entry,\n      distance: calculateDistance(date, entry.year, entry.topSpeed),\n      key: entry.make + ' ' + entry.model,\n      topSpeed\n    };\n  });\n\n  // Sort the list of entries.\n  let [sort, setSort] = useState({\n    asc: false,\n    field: 'distance'\n  });\n\n  props = sortVehicleProps(props, sort.field, sort.asc);\n\n  /**\n   * Sorts the vehicles by the select column (ascending, then descending).\n   */\n  const sortByField = (field: string) => {\n    if (sort.field === field) {\n      setSort({\n        ...sort,\n        asc: !sort.asc\n      });\n    } else {\n      setSort({\n        asc: true,\n        field\n      });\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Filter filter={setFilter}/>\n        </div>\n        <div className=\"col-md-auto\">\n          <Unit setUnitType={setUnitType} unitType={unitType}/>\n        </div>\n      </div>\n      <Vehicles sort={sortByField}>\n        {props.map(prop => <Vehicle {...prop}/>)}\n      </Vehicles>\n    </>\n  );\n};\n\nexport default VehiclesContainer;","import React, { FunctionComponent } from 'react';\n\nimport './Filter.css';\n\n/**\n * The properties for the Filter component.\n */\ntype FilterProps = {\n  filter: Function\n};\n\n/**\n * Renders an input field for filtering the vehicles list.\n */\nconst Filter: FunctionComponent<FilterProps> = ({ filter }) => (\n  <div className=\"input-group filter\">\n    <div className=\"input-group-prepend\">\n      <span className=\"input-group-text\">Filter</span>\n    </div>\n    <input className=\"form-control\" data-testid=\"filter\" onChange={(e) => filter(e.target.value)} type=\"search\"/>\n  </div>\n);\n\nexport default Filter;\n","import React, { FunctionComponent } from 'react';\n\nimport './Vehicle.css';\n\n/**\n * The properties of the Vehicle component.\n */\nexport type VehicleProps = {\n  distance: number,\n  make: string,\n  model: string,\n  topSpeed: number,\n  year: number\n};\n\n/**\n * The number formatter for distance.\n */\nconst distanceFormat = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 2\n});\n\n/**\n * The number formatter for speed.\n */\nconst speedFormat = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 1\n});\n\n/**\n * Renders an individual vehicle for the table of vehicles.\n */\nconst Vehicle: FunctionComponent<VehicleProps> = ({ distance, make, model, topSpeed, year }) => (\n  <tr className=\"vehicle\">\n    <td>{year}</td>\n    <td className=\"d-none d-md-block\">{make}</td>\n    <td>{model}</td>\n    <td className=\"d-none d-md-block\">{speedFormat.format(topSpeed)}</td>\n    <td>{distanceFormat.format(distance)}</td>\n  </tr>\n);\n\nexport default Vehicle;","import React, { FunctionComponent } from 'react';\n\nimport './Vehicles.css';\n\n/**\n * The properties of the Vehicles component.\n */\ntype VehiclesProps = {\n  sort: Function\n};\n\n/**\n * Renders the table containing the individual Vehicle renderings.\n */\nconst Vehicles: FunctionComponent<VehiclesProps> = ({ children, sort }) => (\n  <table className=\"table table-striped vehicles\">\n    <thead>\n      <tr>\n        <th onClick={() => sort('year')}>Year</th>\n        <th className=\"d-none d-md-block\" onClick={() => sort('make')}>Make</th>\n        <th onClick={() => sort('model')}>Model</th>\n        <th className=\"d-none d-md-block text-center\" onClick={() => sort('topSpeed')}>Top Speed</th>\n        <th className=\"text-center\" onClick={() => sort('distance')}>Distance</th>\n      </tr>\n    </thead>\n    <tbody>\n      {children}\n    </tbody>\n  </table>\n);\n\nexport default Vehicles;","/**\n * Calculates the distance travel by a vehicle at its top speed.\n *\n * The first month and day of the given year is used in the calculation. The top speed can be of\n * any unit (miles or kilometers) but it must always be by hour (e.g. 100 mph, 100 km/h). The top\n * speed will always be divided by minutes, seconds, then milliseconds.\n *\n * @param now      The current date and time.\n * @param year     The year the vehicle started traveling.\n * @param topSpeed The top speed of the vehicle.\n */\nconst calculateDistance = (now: Date, year: number, topSpeed: number) => {\n  const speed = topSpeed / 60 / 60 / 1000;\n  const then = new Date(year, 1, 1, 0, 0, 0, 0);\n\n  return (now.getTime() - then.getTime()) * speed;\n};\n\nexport default calculateDistance;","import { VehicleProps } from \"../components/Vehicle/Vehicle\";\n\nconst sortVehicleProps = (array: object[], field: string, asc: boolean) : VehicleProps[] => {\n  return array.sort((a: any, b: any) => {\n    let aField = a[field];\n    let bField = b[field];\n    let flip = asc ? 1 : -1;\n\n    if (typeof aField === \"string\") {\n      aField = aField.toLowerCase();\n    }\n\n    if (typeof bField === \"string\") {\n      bField = bField.toLowerCase();\n    }\n\n    if (aField > bField) {\n      return 1 * flip;\n    } else if (aField < bField) {\n      return -1 * flip;\n    }\n\n    return 0;\n  }) as VehicleProps[];\n};\n\nexport default sortVehicleProps;","import React, { FunctionComponent } from 'react';\n\nimport { UnitType } from '../VehiclesContainer';\n\ntype UnitProps = {\n  setUnitType: Function,\n  unitType: UnitType\n};\n\nconst selectedClass = (expected: UnitType, actual: UnitType) => {\n  if (expected === actual) {\n    return \"btn-primary\";\n  }\n\n  return \"btn-secondary\";\n};\n\nconst Unit: FunctionComponent<UnitProps> = ({ setUnitType, unitType }) => (\n  <div className=\"btn-group\">\n    <button className={\"btn \" + selectedClass(UnitType.MPH, unitType)} onClick={() => setUnitType(UnitType.MPH)} type=\"button\">mph</button>\n    <button className={\"btn \" + selectedClass(UnitType.KMH, unitType)} onClick={() => setUnitType(UnitType.KMH)} type=\"button\">km/h</button>\n  </div>\n);\n\nexport default Unit;\n","import React, { FunctionComponent } from 'react';\n\nimport VehiclesContainer from '../VehiclesContainer';\n\nconst App: FunctionComponent = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h1>Reddit Post</h1>\n        <p>This page is in response to <a href=\"https://www.reddit.com/r/cars/comments/fbl31h/if_the_fastest_vehicle_produced_each_year_was_put/\">this Reddit post</a> and <a href=\"https://www.reddit.com/r/cars/comments/fbl31h/if_the_fastest_vehicle_produced_each_year_was_put/fj4ynns/\">comment</a>.</p>\n        <h1>The Leg Work</h1>\n        <VehiclesContainer/>\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}